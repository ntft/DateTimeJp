<?php
/**
 * サンプル - プリペアドステートメント
 */

// ファイルの読み込み
require_once '../PDODB.php';

// PDODBクラスのオブジェクトを生成
$db = new PDODB('test_db');

// プリペアドステートメントは実行したいSQLをコンパイルした
// 1種のテンプレートのようなものです。
// テンプレートを最初に作りさえすれば、バインドする内容を変えて、
// 何度でもSQLを実行することが出来ます。
// 2回目以降はテンプレートを作る処理は不要なので、その分処理が早くなります。
// 単純なSQLではその効果はあまり実感できませんが、
// 複雑なSQLになると目に見えて早くなります。
//
// プリペアドステートメントはPDOで実現される機能です。
// PDOを継承したPDODBでもその恩恵を受けることが出来ます。

try {
	// トランザクション開始
	$db->beginTransaction();

	// バインドする内容を変えて、10回INSERTします。
	// 「元のSQLは変わらず、バインド値のみ変わる」
	// こういった時にプリペアドステートメント機能を使います。
	for ($ii = 0; $ii < 10; $ii++) {
		// プリペアドステートメント使用モード
		// このメソッドを呼び出すだけです。
		// 後は内部で勝手にやってくれます。
		$db->preparaMode();
		// 処理が終わると、プリペアドステートメント使用モードではなくなるので、
		// 毎回ループの中でこのメソッドを呼び出すようにしましょう。

		// SQL自体が変わる場合、プリペアドステートメント機能は使えません。
		// 使うとおそらくエラーになってしまうでしょう。
		// 使う時はお気をつけて…。
		$db->sql = 'INSERT INTO profile_t(name, age) VALUES(:name, :age)';
		$db->aryBind = array(
			':name' => 'yamada' . $ii,
			':age' => $ii
		);
		$addCnt = $db->insert();
	}
	$now = microtime(true);

	// 成功：コミット
	$db->commit();
} catch (PDOException $e) {
	// 失敗：ロールバック
	$db->rollBack();
	// 処理終了
	exit;
}
?>